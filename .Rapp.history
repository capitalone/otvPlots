where <- function(name, env=parent.frame()){#
	if(identical(env, emptyenv())){stop("Can't find ", name, call. = FALSE)#
		} else {#
			if(exists(name, env, inherits = FALSE)){#
				return(paste(name, "found in", environmentName(env)))#
				} else {#
					where(name, parent.env(env))#
				}#
		}	#
}
where("z")
where("mean")
where("matrix")
where("coxph")
library(survival)
where("coxph")
ls()
search()
.GlobalEnv
package:survival
as.environment(package:stats)
as.environment("package:stats")
as.enviroment(.GlobalEnv)
as.environment(.GlobalEnv)
is.null(as.environment("package:stats")$name)
is.null(attr(as.environment("package:stats"),"name"))
where <- function(name, env=parent.frame()){#
	out = list()#
	if(identical(env, emptyenv())){return(out))#
		} else {#
			if(!is.null(attr(env),"name")){#
				out = append(out, environmentName(env))#
				where(name, parent.env(env))#
				} else {#
					where(name, parent.env(env))#
				}#
		}	#
}
where <- function(name, env=parent.frame()){#
	out = list()#
	if(identical(env, emptyenv())){return(out)#
		} else {#
			if(!is.null(attr(env),"name")){#
				out = append(out, environmentName(env))#
				where(name, parent.env(env))#
				} else {#
					where(name, parent.env(env))#
				}#
		}	#
}
where <- function(env=parent.frame()){#
	out = list()#
	if(identical(env, emptyenv())){return(out)#
		} else {#
			if(!is.null(attr(env),"name")){#
				out = append(out, environmentName(env))#
				where(parent.env(env))#
				} else {#
					where(parent.env(env))#
				}#
		}	#
}
where()
where <- function(env=parent.frame()){#
	out = list()#
	if(identical(env, emptyenv())){return(out)#
		} else {#
			if(!is.null(attr(env,"name"))){#
				out = append(out, environmentName(env))#
				where(parent.env(env))#
				} else {#
					where(parent.env(env))#
				}#
		}	#
}
where()
search()
env=globalenv()
out = list()
if(!is.null(attr(env,"name"))){#
				out = append(out, environmentName(env))
}
out
is.null(attr(env,"name"))
env=parent.env(env)
is.null(attr(env,"name"))
out = append(out, environmentName(env))
out
where <- function(env=parent.frame()){#
	out = list()#
	if(identical(env, emptyenv())){return(out)#
		} else {#
			if(!is.null(attr(env,"name"))){#
				out = append(out, environmentName(env))#
				where(parent.env(env))#
				} else {#
					where(parent.env(env))#
				}#
		}	#
}
where()
where <- function(env=parent.frame()){#
	if(identical(env, emptyenv())){return(out)#
		} else {#
			if(!is.null(attr(env,"name"))){#
				print(environmentName(env))#
				where(parent.env(env))#
				} else {#
					where(parent.env(env))#
				}#
		}	#
}
where()
where <- function(env=parent.frame()){#
	if(identical(env, emptyenv())){stop()#
		} else {#
			if(!is.null(attr(env,"name"))){#
				print(environmentName(env))#
				where(parent.env(env))#
				} else {#
					where(parent.env(env))#
				}#
		}	#
}
where()
quickSort = function(aVector){#
	if(length(aVector)<=1){return(aVector)}#
	element = aVector[1]#
	partition = aVector[-1]#
	v1 = partition[partition < element]#
	v2 = partition[partition >= element]#
	v1 = quickSort(v1)#
	v2 = quickSort(v2)#
	return(c(v1,element,v2))#
}
quickSort(c(3,7,8,5,2,1,9,5,4))
mergesort=function(v){#
	if(length(v)<=1) return(v)#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1]<right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	M = length(v)/2#
	N = length(v)#
	left = m[1:floor(M)]#
	right = m[(floor(M+1):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] < right[1]){ return(c(left,right))#
		} else { return (merge(left,right))}#
}
mergesort=function(v){#
	if(length(v)<=1) return(v)#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1]<right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	M = length(v)/2#
	N = length(v)#
	left = m[1:floor(M)]#
	right = m[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] < right[1]){ return(c(left,right))#
		} else { return (merge(left,right))}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){#
	if(length(v)<=1) return(v)#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1]<right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] < right[1]){ return(c(left,right))#
		} else { return (merge(left,right))}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){#
	if(length(v)<=1) return(v)#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1]<right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ return(c(left,right))#
		} else { return(merge(left,right))}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){#
	if(length(v)<=1) return(v)#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1]<=right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ return(c(left,right))#
		} else { return(merge(left,right))}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1]<=right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	if(length(v)<=1) {return(v)} else {#
 	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ return(c(left,right))#
		} else { return(merge(left,right))}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){	#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	if(length(v)<=1) {return(v)} else {#
 	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ return(c(left,right))#
		} else { return(merge(left,right))}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
v= c(3,8,7,1,2,4,9,3,5)
merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}
M = length(v)/2
N = length(v)
left = v[1:floor(M)]
right = v[(floor(M+1)):N]
left
right
mergesort=function(v){	#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	if(length(v)<=1) v else {#
 	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ return(c(left,right))#
		} else { return(merge(left,right))}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){	#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	if(length(v)<=1) v else {#
 	M = length(v)/2#
	N = length(v)#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){	#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left[1])#
		if(length(left)>0) result = c(result, right[1])#
		result#
	}#
	N = length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(m)#
#
{#
   merge_ <- function(left, right)#
   # Recursive function to compare and append values in order#
   {#
      # Create a list to hold the results#
      result <- c()#
      # This is our stop condition. While left and right contain #
      # a value, compare them#
      while(length(left) > 0 && length(right) > 0)#
      {#
           # If left is less than or equal to right,#
           # add it to the result list#
         if(left[1] <= right[1])#
         {#
            result <- c(result, left[1])#
            # Remove the value from the list#
            left <- left[-1]#
         } else#
         {#
            # When right is less than or equal to left,#
            # add it to the result.#
            result <- c(result, right[1])#
            # Remove the appended integer from the list.#
            right <- right[-1]#
         }#
      }#
      # Keep appending the values to the result while left and right#
      # exist.#
      if(length(left) > 0) result <- c(result, left)#
      if(length(right) > 0) result <- c(result, right)#
      result#
   }#
#
   # Below is our stop condition for the mergesort function.#
   # When the length of the vector is 1, just return the integer. #
   len <- length(m)#
   if(len <= 1) m else#
   {#
      # Otherwise keep dividing the vector into two halves.#
      middle <- length(m) / 2#
      # Add every integer from 1 to the middle to the left#
      left <- m[1:floor(middle)]#
      right <- m[floor(middle+1):len]#
      # Recursively call mergesort() on the left and right halves.#
      left <- mergesort(left)#
      right <- mergesort(right)#
      # Order and combine the results.#
      if(left[length(left)] <= right[1])#
      {#
         c(left, right)#
      } else#
      {#
         merge_(left, right)#
      }#
   }#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left)#
		if(length(left)>0) result = c(result, right)#
		result#
	}#
	N = length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left)#
		if(length(left)>0) result = c(result, right)#
		result#
	}#
	N = length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort=function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left)#
		if(length(left)>0) result = c(result, right)#
		result#
	}#
	N = length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort = function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(left)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(v){	#
	merge <- function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(left)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ c(left,right)#
		} else {merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(v){	#
	merge <- function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(left)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(v){	#
	merge <- function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left[1])#
		if(length(left)>0) result <- c(result, right[1])#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(v){	#
	merge <- function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left[1])#
		if(length(left)>0) result <- c(result, right[1])#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(v){	#
	merge <- function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(left)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort <- function(v){	#
	merge <- function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left <- left[-1]#
				} else {#
					result <- c(result, right[1])#
					right <- right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(right)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort = function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left = left[-1]#
				} else {#
					result <- c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(right)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left <- v[1:floor(M)]#
	right <- v[(floor(M+1)):N]#
	left <- mergesort(left)#
	right <- mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort = function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left = left[-1]#
				} else {#
					result <- c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result <- c(result, left)#
		if(length(right)>0) result <- c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort = function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left = left[-1]#
				} else {#
					result <- c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left)#
		if(length(right)>0) result = c(result, right)#
		result#
	}#
	N <- length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort = function(v){	#
	merge = function(left, right){#
		result <- c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result <- c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left)#
		if(length(right)>0) result = c(result, right)#
		result#
	}#
	N = length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
mergesort = function(v){	#
	merge = function(left, right){#
		result = c()#
		while(length(left)>0 && length(right)>0){#
			if(left[1] <= right[1]) {#
					result = c(result, left[1])#
					left = left[-1]#
				} else {#
					result = c(result, right[1])#
					right = right[-1]#
				}#
		}#
		if(length(left)>0) result = c(result, left)#
		if(length(right)>0) result = c(result, right)#
		result#
	}#
	N = length(v)#
	if(N<=1) v else {#
 	M = length(v)/2#
	left = v[1:floor(M)]#
	right = v[(floor(M+1)):N]#
	left = mergesort(left)#
	right = mergesort(right)#
	if(left[length(left)] <= right[1]){ #
		c(left,right)#
		} else {#
			merge(left,right)}#
		}#
}
mergesort(c(3,8,7,1,2,4,9,3,5))
result
library(Rcpp)
install.packages("~/Downloads/RVowpalWabbit_0.0.6.tar.gz",repos=NULL,type="source")
.14*.045
.17*.025
.0063-.00425
()-0.27 + 1 )/2
(-0.27 + 1 )/2
2*.365
-1
(0.27 + 1 )/2
(1.3)/2
1.24/2
1.33/2
1.32/2
1.47/2
1.38/2
1.34/2
1.15/2
1.17/2
2/9*.95
.08*.92
.003*1000000+.00002*3000000+.00035*3000000
4110/7000000
4110/7000000*100
((0.03/100)*5000000)+((0.00001)*9000000)+((0.00001)*38000000)/(38000000+5000000+9000000)
((0.03/100)*5000000)+(0.00001)*9000000)+((0.00001)*38000000))/(38000000+5000000+9000000)
((0.03/100)*5000000+0.00001*9000000)+0.00001*38000000)/(38000000+5000000+9000000)
((0.03/100)*5000000+0.00001*9000000+0.00001*38000000)/(38000000+5000000+9000000)
8000000*27/57
8000000*23/57
(1.06+.81+1.74)*1000000/(26632+2276+10031)
list.files("~/Downloads")
list.files("~/Downloads", pattern=".tar.gz")
install.packages("~/Downloads/Cairo_1.5-9.tar.gz", repos=NULL,type="source")
system("echo $CAIRO_CFLAGS")
system("echo $CAIRO_LIBS")
system("export CAIRO_LIBS=-L${HOME}/usr/local/lib")
system("export CAIRO_CFLAGS=-I${HOME}/usr/local/include")
system("echo $CAIRO_LIBS")
list.files("~/Downloads", pattern=".tar.gz")
install.packages("~/Downloads/Cairo_1.5-9.tar.gz", repos=NULL, type="source")
system("source ~/.bashrc")
install.packages("~/Downloads/Cairo_1.5-9.tar.gz", repos=NULL, type="source")
install.packages("Cairo")
install.packages("cairo")
install.packages("~/Downloads/Cairo_1.5-9.tar.gz", repos=NULL, type="source")
install.packages("data.table")
_fn = 5
_fn = function(x) x
??print.lm
??print.glm
?print
install.packages("~/Downloads/h2o_3.8.3.3.tar.gz", repos=NULL, type="sourec")
install.packages("~/Downloads/h2o_3.8.3.3.tar.gz", repos=NULL, type="sourc")
install.packages("~/Downloads/h2o_3.8.3.3.tar.gz", repos=NULL, type="source")
Sys.getenv("http")
Sys.getenv("http_proxy")
Sys.unsetenv("http_proxy")
Sys.getenv("https_proxy")
Sys.Unsetenv("https_proxy")
Sys.unsetenv("https_proxy")
Sys.getenv("https")
install.packages("~/Downloads/h2o_3.8.3.3.tar.gz", repos=NULL, type="source")
library(h2o)
h2o.init()
?h2o.importfile
??h2o.importFile
h2o.importFile("~/Downloads/LoanStat3.csv")
h2o.importFile("~/LoanStat3.csv")
h2o.importFile("/Users/sju922/LoanStat3.csv")
h2o.importFile("/Users/sju922/h2o/LoanStat3.csv")
h2oData = h2o.importFile("/Users/sju922/h2o/LoanStat3.csv")
summary(h2oData)
h2o.gbm(y = "loan_amt", x = "collection_recovery_fee", data = h2oData,#
n.trees = 10, interaction.depth = 3   n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
h2o.gbm(y = "loan_amt", x = "collection_recovery_fee", data = h2oData, n.trees = 10, interaction.depth = 3   n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
h2o.gbm(y = "loan_amnt", x = "collection_recovery_fee", data = h2oData, n.trees = 10, interaction.depth = 3   n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
h2o.gbm(y = "loan_amnt", x = c("funded_amnt","collection_recovery_fee"), data = h2oData, n.trees = 10, interaction.depth = 3   n.minobsinnode = 2, shrinkage = 0.2, distribution= "gaussian")
h2o.gbm(y = "loan_amnt", x = c("funded_amnt","collection_recovery_fee"), data = h2oData)
h2o.gbm(y = "loan_amnt", x = c("funded_amnt","collection_recovery_fee"))
?h2o.gbm
h2o.gbm(y = "loan_amnt", x = c("funded_amnt","collection_recovery_fee"), h2oData)
h2oData = h2o.importFile("~/Desktop/testVelma/efx_data_R.csv")
h2oData = h2o.importFile("Users/sju922/Desktop/testVelma/efx_data_R.csv")
h2oData = h2o.importFile("/Users/sju922/Desktop/testVelma/efx_data_R.csv")
summary(h2oData)
df <- h2o.importFile(path = "http://s3.amazonaws.com/h2o-public-test-data/smalldata/gbm_test/titanic.csv")
mamData = fread("~/Downloads/mammographic.dat")
library(data.table)
mamData = fread("~/Downloads/mammographic.dat")
mamData
library(Velma)
?RunVlm
RunVlm(dataFl=mamData, labelFl=NULL, selectCols = NULL, dropCols = NULL, dateNm="date", dateFt=NULL,#
  dateGp="weeks", dateGpBp = "months", weightNm = NULL, varCols = NULL, buildTm,#
  topList = NULL, skewOpt = NULL, "~/Downloads/mam.pdf", doParallel = FALSE,#
  kCore = NULL)
RunVlm(dataFl="~/Downloads/mammographic.dat", labelFl=NULL, selectCols = NULL, dropCols = NULL, dateNm="date", dateFt=NULL,#
  dateGp="weeks", dateGpBp = "months", weightNm = NULL, varCols = NULL, buildTm,#
  topList = NULL, skewOpt = NULL, "~/Downloads/mam.pdf", doParallel = FALSE,#
  kCore = NULL)
PrepData
install_github("sju922/Velma",  host="github.kdc.capitalone.com/api/v3")
devtools::install_github("sju922/Velma",  host="github.kdc.capitalone.com/api/v3")
library(Velma)
example(PlotVlm)
PlotVlm
1822-14
911 -14
library(scales) show_col(hue_pal()(4))
library(scales)
?package::scales
?package:::scales
?scales
gg_color_hue <- function(n) {#
  hues = seq(15, 375, length = n + 1)#
  hcl(h = hues, l = 65, c = 100)[1:n]#
}
gg_colour_hue(3)
gg_color_hue(3)
show_col(hue_pal()(3))
hue_pal(3)
hue_pal()(3)
logit = function(x) x/(1-x)
plot(x=seq(-1000,1000), logit(x))
x=seq(-1000,1000)
y=logit(x)
plot(x,y)
logit = function(x) log(x/(1-x))
plot(x,y)
y=logit(x)
x=seq(0,1, by=.01)
y=logit(x)
plot(x,y)
plot(y, x)
plot(y, x, xlim=c(-10,10))
plot(y, x, xlim=c(-100,100))
plot(y, x, xlim=c(-100,100), ylim=c(-100,100))
x=seq(0,1, by=.001)
plot(y, x, xlim=c(-100,100), ylim=c(-100,100))
y=logit(x)
plot(y, x, xlim=c(-100,100), ylim=c(-100,100))
expit = function(x) exp(x)/(1+exp(x))
x=seq(-100,100)
y=expit(x)
plot(x,y)
plot(x,y, ylim=c(-100,10))
plot(x,y, ylim=c(-100,100))
plot(x,y, ylim=c(-10,10), xlim=c(-10,10))
x=seq(-10,10, by=.5)
y=expit(x)
plot(x,y, ylim=c(-10,10), xlim=c(-10,10))
logit(1/2)
getwd()
setwd("~/Desktop/Velma/")
library(devtools)
test()
document()
